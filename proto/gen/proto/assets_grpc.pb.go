// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/assets.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AssetsService_UploadAsset_FullMethodName     = "/assets.AssetsService/UploadAsset"
	AssetsService_GetAsset_FullMethodName        = "/assets.AssetsService/GetAsset"
	AssetsService_GetAssetsByUser_FullMethodName = "/assets.AssetsService/GetAssetsByUser"
	AssetsService_DeleteAsset_FullMethodName     = "/assets.AssetsService/DeleteAsset"
	AssetsService_HealthCheck_FullMethodName     = "/assets.AssetsService/HealthCheck"
)

// AssetsServiceClient is the client API for AssetsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// AssetsService defines the gRPC service for assets management
type AssetsServiceClient interface {
	// UploadAsset uploads a new asset/file
	UploadAsset(ctx context.Context, in *UploadAssetRequest, opts ...grpc.CallOption) (*UploadAssetResponse, error)
	// GetAsset retrieves an asset by its ID
	GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error)
	// GetAssetsByUser retrieves assets for a specific user
	GetAssetsByUser(ctx context.Context, in *GetAssetsByUserRequest, opts ...grpc.CallOption) (*GetAssetsByUserResponse, error)
	// DeleteAsset deletes an asset by its ID
	DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error)
	// HealthCheck returns the service health status
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type assetsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetsServiceClient(cc grpc.ClientConnInterface) AssetsServiceClient {
	return &assetsServiceClient{cc}
}

func (c *assetsServiceClient) UploadAsset(ctx context.Context, in *UploadAssetRequest, opts ...grpc.CallOption) (*UploadAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UploadAssetResponse)
	err := c.cc.Invoke(ctx, AssetsService_UploadAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAsset(ctx context.Context, in *GetAssetRequest, opts ...grpc.CallOption) (*GetAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssetResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) GetAssetsByUser(ctx context.Context, in *GetAssetsByUserRequest, opts ...grpc.CallOption) (*GetAssetsByUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAssetsByUserResponse)
	err := c.cc.Invoke(ctx, AssetsService_GetAssetsByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) DeleteAsset(ctx context.Context, in *DeleteAssetRequest, opts ...grpc.CallOption) (*DeleteAssetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteAssetResponse)
	err := c.cc.Invoke(ctx, AssetsService_DeleteAsset_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetsServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, AssetsService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetsServiceServer is the server API for AssetsService service.
// All implementations must embed UnimplementedAssetsServiceServer
// for forward compatibility.
//
// AssetsService defines the gRPC service for assets management
type AssetsServiceServer interface {
	// UploadAsset uploads a new asset/file
	UploadAsset(context.Context, *UploadAssetRequest) (*UploadAssetResponse, error)
	// GetAsset retrieves an asset by its ID
	GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error)
	// GetAssetsByUser retrieves assets for a specific user
	GetAssetsByUser(context.Context, *GetAssetsByUserRequest) (*GetAssetsByUserResponse, error)
	// DeleteAsset deletes an asset by its ID
	DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error)
	// HealthCheck returns the service health status
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedAssetsServiceServer()
}

// UnimplementedAssetsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAssetsServiceServer struct{}

func (UnimplementedAssetsServiceServer) UploadAsset(context.Context, *UploadAssetRequest) (*UploadAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAsset not implemented")
}
func (UnimplementedAssetsServiceServer) GetAsset(context.Context, *GetAssetRequest) (*GetAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAsset not implemented")
}
func (UnimplementedAssetsServiceServer) GetAssetsByUser(context.Context, *GetAssetsByUserRequest) (*GetAssetsByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAssetsByUser not implemented")
}
func (UnimplementedAssetsServiceServer) DeleteAsset(context.Context, *DeleteAssetRequest) (*DeleteAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAsset not implemented")
}
func (UnimplementedAssetsServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAssetsServiceServer) mustEmbedUnimplementedAssetsServiceServer() {}
func (UnimplementedAssetsServiceServer) testEmbeddedByValue()                       {}

// UnsafeAssetsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetsServiceServer will
// result in compilation errors.
type UnsafeAssetsServiceServer interface {
	mustEmbedUnimplementedAssetsServiceServer()
}

func RegisterAssetsServiceServer(s grpc.ServiceRegistrar, srv AssetsServiceServer) {
	// If the following call pancis, it indicates UnimplementedAssetsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AssetsService_ServiceDesc, srv)
}

func _AssetsService_UploadAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).UploadAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_UploadAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).UploadAsset(ctx, req.(*UploadAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAsset(ctx, req.(*GetAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_GetAssetsByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAssetsByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).GetAssetsByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_GetAssetsByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).GetAssetsByUser(ctx, req.(*GetAssetsByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_DeleteAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAssetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).DeleteAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_DeleteAsset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).DeleteAsset(ctx, req.(*DeleteAssetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AssetsService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetsServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AssetsService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetsServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AssetsService_ServiceDesc is the grpc.ServiceDesc for AssetsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AssetsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "assets.AssetsService",
	HandlerType: (*AssetsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadAsset",
			Handler:    _AssetsService_UploadAsset_Handler,
		},
		{
			MethodName: "GetAsset",
			Handler:    _AssetsService_GetAsset_Handler,
		},
		{
			MethodName: "GetAssetsByUser",
			Handler:    _AssetsService_GetAssetsByUser_Handler,
		},
		{
			MethodName: "DeleteAsset",
			Handler:    _AssetsService_DeleteAsset_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AssetsService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/assets.proto",
}
