name: Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  GO_VERSION: "1.23.1"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: assets_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
          - 9001:9001

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: go mod download

    - name: Install migrate tool
      run: |
        go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest

    - name: Wait for services to be ready
      run: |
        # Wait for PostgreSQL
        until pg_isready -h localhost -p 5432 -U test_user; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done
        
        # Wait for Redis
        until redis-cli -h localhost -p 6379 ping; do
          echo "Waiting for Redis..."
          sleep 2
        done
        
        # Wait for MinIO
        until curl -f http://localhost:9000/minio/health/live; do
          echo "Waiting for MinIO..."
          sleep 2
        done

    - name: Run database migrations
      run: |
        migrate -path ./migrations -database "postgres://test_user:test_password@localhost:5432/assets_test?sslmode=disable" up
      env:
        DATABASE_URL: postgres://test_user:test_password@localhost:5432/assets_test?sslmode=disable

    - name: Generate protobuf files
      run: |
        # Install protoc if not available
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        
        # Install Go protobuf plugins
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        
        # Generate protobuf files
        make proto-gen || protoc --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          proto/assets.proto

    - name: Verify code formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi

    - name: Run go vet
      run: go vet ./...

    - name: Run staticcheck
      uses: dominikh/staticcheck-action@v1.3.0
      with:
        version: "2023.1.6"

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
      env:
        # Database configuration
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: test_user
        DB_PASSWORD: test_password
        DB_NAME: assets_test
        DB_SSLMODE: disable
        
        # Redis configuration
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        REDIS_DB: 0
        
        # MinIO configuration
        MINIO_ENDPOINT: localhost:9000
        MINIO_ACCESS_KEY: minioadmin
        MINIO_SECRET_KEY: minioadmin
        MINIO_BUCKET: test-assets
        MINIO_USE_SSL: false
        
        # Application configuration
        APP_ENV: test
        LOG_LEVEL: debug
        GRPC_PORT: 9090
        HTTP_PORT: 8080

    - name: Generate test coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: |
          coverage.out
          coverage.html

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Generate protobuf files
      run: |
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        make proto-gen || protoc --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          proto/assets.proto

    - name: Build application
      run: |
        go build -v -o assets-service ./cmd/app
        go build -v -o grpc-client ./cmd/client

    - name: Test Docker build
      run: |
        docker build -t assets-service:test .

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

 